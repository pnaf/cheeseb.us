#!/usr/bin/env python3
#
#     Cast, a mindful wrapper for MPC and MPD as an Icecast source client.
#     Copyright (C) 2015  Patrick Nafarrete
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import argparse
import json
import urllib.request
import sys
import subprocess
prog = 'Cast'
parser = argparse.ArgumentParser(prog=prog.lower(), description='Cast, a\
                                 mindful wrapper for MPC and MPD as an Icecast\
                                 source client.', epilog='Mail bug reports and\
                                 suggestions to <patrick@cheeseb.us>.')
parser.add_argument('-d', '--debug', action='store_true', help='print lots of\
                    debugging information')
subparsers = parser.add_subparsers(metavar='{fire,ice,lightning}')
parser_clear = subparsers.add_parser('clear', description='Empty the\
                                     playlist. Cast will prompt for\
                                     continuation if listeners are present.',
                                     help='empty playlist')
parser_crossfade = subparsers.add_parser('crossfade', description='Get and set\
                                         the current amount of crossfading\
                                         between songs.', help='get and set\
                                         amount of crossfading between songs')
parser_crossfade.add_argument('seconds', nargs='?', type=int, help='set\
                              current amount of crossfading between songs')
parser_current = subparsers.add_parser('current', aliases=['spell'],
                                       description='Print the currently\
                                       playing song.', help='print currently\
                                       playing song')
parser_next = subparsers.add_parser('next', description='Start playing the\
                                    next song. Cast will prompt for\
                                    continuation is listeners are present.',
                                    help='start playing next song')
parser_pause = subparsers.add_parser('pause', description='Pause the stream.\
                                     Cast will prompt for continuation if\
                                     listeners are present.', help='pause\
                                     stream')
parser_play = subparsers.add_parser('play', aliases=['fire'],
                                    description='Play the stream.', help='play\
                                    stream')
parser_prev = subparsers.add_parser('prev', aliases=['previous'],
                                    description='Start playing the previous\
                                    song. Cast will prompt for continuation if\
                                    listeners are present.')
parser_purge = subparsers.add_parser('purge', aliases=['lightning'],
                                     description='Stop the stream and play a\
                                     newly-shuffled playlist. Cast will prompt\
                                     for continuation if listeners are\
                                     present.', help='stop stream and play a\
                                     newly-shuffled playlist')
parser_stats = subparsers.add_parser('stats', help='display statistics about\
                                     MPD')
parser_status = subparsers.add_parser('status', help='display MPD status')
parser_stop = subparsers.add_parser('stop', aliases=['ice'], description='Stop\
                                    the stream. Cast will prompt for\
                                    continuation if listeners are present.',
                                    help='stop stream')
parser_timestamp = subparsers.add_parser('timestamp', help='print timestamp of\
                                         last database update')
parser_update = subparsers.add_parser('update', help='update MPD database')
parser.parse_args()
if '-d' in sys.argv or '--debug' in sys.argv:
    print(sys.argv)
if len(sys.argv) == 1:
    sys.exit("Try `{} --help' for more options.".format(prog.lower()))


def cast(spell):
    if '-d' in sys.argv or '--debug' in sys.argv:
        print('Casting spell:', spell)
    if spell == 'fire':
        sys.argv[sys.argv.index(spell)] = "play"
    elif spell == 'ice':
        sys.argv[sys.argv.index(spell)] = "stop"
    elif spell == 'lightning':
        sys.argv[sys.argv.index(spell)] = "purge"


def get_icestats():
    status_json = "http://127.0.0.1:8000/status-json.xsl"
    if urllib.request.urlopen(status_json).getcode() == 200:
        global icestats
        with urllib.request.urlopen(status_json) as response:
            icestats = response.read()
        icestats = icestats.decode('utf-8')
        icestats = json.loads(icestats)
    else:
        sys.exit("Error processing icestats! Is Icecast running on port 8000?")


def prompt(command):
    reply = input("Are you sure you want to continue (yes/no)? ")
    while reply.lower() != 'yes' and reply.lower() != 'no':
        reply = input("Please type 'yes' or 'no': ")
    else:
        if reply.lower() == 'yes':
            mpc = subprocess.call(command, shell=True)
            exit(mpc)
        else:
            sys.exit("Stop failed!")


def require_mpc():
    try:
        status = subprocess.check_output("mpc status", shell=True)
    except subprocess.CalledProcessError:
        sys.exit(127)
if 'fire' in sys.argv:
    cast("fire")  # (∩◕‿◕)⊃━☆ﾟ.*･｡ﾟ
elif 'ice' in sys.argv:
    cast("ice")  # (∩◕‿◕)⊃━☆ﾟ.*･｡ﾟ
elif 'lightning' in sys.argv:
    cast("lightning")  # (∩◕‿◕)⊃━☆ﾟ.*･｡ﾟ
if 'clear' in sys.argv:
    require_mpc()
    get_icestats()
    command = "mpc clear"
    if icestats['icestats']['source']['listeners'] > 0:
        print('Listener count is', icestats['icestats']['source']['listeners'])
        prompt(command)
    elif icestats['icestats']['source']['listeners'] == 0:
        subprocess.check_call(command, shell=True)
    else:
        sys.exit("Error processing icestats!")
if 'crossfade' in sys.argv:
    seconds = None
    for argument in sys.argv:
        try:
            seconds = int(argument)
        except ValueError:
            pass
    if seconds is None:
        try:
            subprocess.check_call("mpc crossfade", shell=True)
        except subprocess.CalledProcessError:
            sys.exit(127)
    elif type(seconds) == int:
        try:
            subprocess.check_call("mpc crossfade {}".format(str(seconds)),
                                  shell=True)
        except subprocess.CalledProcessError:
            sys.exit(127)
    else:
        sys.exit("Error processing arguments!")
if 'current' in sys.argv:
    try:
        subprocess.check_call("mpc current", shell=True)
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
if 'next' in sys.argv:
    try:
        subprocess.check_call("mpc status", shell=True)
    except subprocess.CalledProcessError:
        sys.exit(127)
    get_icestats()
    command = "mpc next"
    if icestats['icestats']['source']['listeners'] > 0:
        print('Listener count is', icestats['icestats']['source']['listeners'])
        prompt(command)
        subprocess.check_call("mpc status", shell=True)
    elif icestats['icestats']['source']['listeners'] == 0:
        subprocess.check_call(command, shell=True)
    else:
        sys.exit("Error processing icestats!")
if 'pause' in sys.argv:
    try:
        status = subprocess.check_output("mpc status", shell=True)
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
    status = status.decode("utf-8", "strict")
    if len(status.splitlines()) == 1:
        sys.exit("Nothing to pause!")
    elif status.splitlines()[1].startswith('[playing]'):
        subprocess.check_call("mpc pause", shell=True)
    elif status.splitlines()[1].startswith('[paused]'):
        print('Already paused.')
    else:
        sys.exit("Error processing status!")
if 'play' in sys.argv:
    try:
        subprocess.check_call("mpc play", shell=True)
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
if 'prev' in sys.argv:
    try:
        subprocess.check_call("mpc status", shell=True)
        get_icestats()
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
    command = "mpc prev"
    if icestats['icestats']['source']['listeners'] > 0:
        print('Listener count is', icestats['icestats']['source']['listeners'])
        prompt(command)
        subprocess.check_call("mpc status", shell=True)
    elif icestats['icestats']['source']['listeners'] == 0:
        subprocess.check_call(command, shell=True)
    else:
        sys.exit("Error processing icestats!")
if 'purge' in sys.argv:
    try:
        status = subprocess.check_output("mpc status", shell=True)
        status = status.decode("utf-8", "strict")
        get_icestats()
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
    command = "mpc ; mpc -q stop ; mpc -q clear ; mpc ls | mpc add ; mpc play"
    if len(status.splitlines()) == 1:
        print('Already stopped.')
        mpc = subprocess.call(command, shell=True)
        exit(mpc)
    elif icestats['icestats']['source']['listeners'] > 0:
        print('Listener count is', icestats['icestats']['source']['listeners'])
        prompt(command)
    elif icestats['icestats']['source']['listeners'] == 0:
        mpc = subprocess.call(command, shell=True)
    else:
        sys.exit("Error processing icestats!")
if 'spell' in sys.argv:
    try:
        subprocess.check_call("mpc current", shell=True)
    except subprocess.CalledProcessError as err:
        if '-d' in sys.argv or '--debug' in sys.argv:
            print(err)
        sys.exit(127)
if 'stats' in sys.argv:
    require_mpc()
    subprocess.check_call("mpc stats", shell=True)
if 'status' in sys.argv:
    require_mpc()
    subprocess.check_call("mpc", shell=True)
if 'stop' in sys.argv:
    try:
        mpc = subprocess.check_output("mpc", shell=True)
        mpc = mpc.decode("utf-8", "strict")
    except subprocess.CalledProcessError:
        sys.exit(127)
    get_icestats()
    if len(mpc.splitlines()) == 1:
        print("Already stopped.")
    elif icestats['icestats']['source']['listeners'] > 0:
        print('Listener count is', icestats['icestats']['source']['listeners'])
        prompt("mpc stop")
    else:
        mpc = subprocess.call("mpc stop", shell=True)
        exit(mpc)
if 'timestamp' in sys.argv:
    require_mpc()
    mpc = subprocess.check_output("mpc stats", shell=True)
    mpc = mpc.decode("utf-8", "strict")
    if 'DB Updated' in mpc.splitlines()[6]:
        print(' '.join(mpc.splitlines()[6].replace("   ", " ").split(' ')[2:]))
    else:
        sys.exit("Error processing db_updated!")
if 'update' in sys.argv:
    require_mpc()
    mpc = subprocess.check_output("mpc stats", shell=True)
    mpc = mpc.decode("utf-8", "strict")
    if 'Artists' in mpc.splitlines()[0]:
        old_artist_count = mpc.splitlines()[0].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing old_artist_count!")
    if 'Albums' in mpc.splitlines()[1]:
        old_album_count = mpc.splitlines()[1].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing old_album_count!")
    if 'Songs' in mpc.splitlines()[2]:
        old_song_count = mpc.splitlines()[2].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing old_song_count!")
    if 'DB Updated' in mpc.splitlines()[6]:
        old_timestamp = mpc.splitlines()[6].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing old_timestamp!")
    subprocess.check_call("mpc update --wait --quiet", shell=True)
    mpc = subprocess.check_output("mpc stats", shell=True)
    mpc = mpc.decode("utf-8", "strict")
    if 'Artists' in mpc.splitlines()[0]:
        new_artist_count = mpc.splitlines()[0].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing new_artist_count!")
    if 'Albums' in mpc.splitlines()[1]:
        new_album_count = mpc.splitlines()[1].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing new_album_count!")
    if 'Songs' in mpc.splitlines()[2]:
        new_song_count = mpc.splitlines()[2].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing new_song_count!")
    if 'DB Updated' in mpc.splitlines()[6]:
        new_timestamp = mpc.splitlines()[6].replace(" ", "").split(':')[1]
    else:
        sys.exit("Error processing new_timestamp!")
    if new_timestamp != old_timestamp:
        print("Artists: {} -> {}".format(old_artist_count, new_artist_count))
        print("Albums: {} -> {}".format(old_album_count, new_album_count))
        print("Songs: {} -> {}".format(old_song_count, new_song_count))
        if '-d' in sys.argv or '--debug' in sys.argv:
            print("DB timestamp before update: {}".format(old_timestamp))
            print("DB timestamp after update: {}".format(new_timestamp))
    else:
        print('Already up-to-date.')
        if '-d' in sys.argv or '--debug' in sys.argv:
            print("Artists: {} -> {}".format(old_artist_count, new_artist_count))
            print("Albums: {} -> {}".format(old_album_count, new_album_count))
            print("Songs: {} -> {}".format(old_song_count, new_song_count))
            print("DB timestamp before update: {}".format(old_timestamp))
            print("DB timestamp after update: {}".format(new_timestamp))